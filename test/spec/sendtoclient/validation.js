var Ajv = require('ajv');
var setupAsync = require('ajv-async');

var ajv = setupAsync(new Ajv);
// sendtoclient-20-4-2018
var data = require('../../log/sendtoclient-20-4-2018.json');

/**
 * postschema model used to insert in the category
 * @AutoGenerated [emailId,emailChangeContent,pdfContent]
 * @required [name]
 */
var postSchema = {
	"$async":true,
  	"additionalProperties": false,
  	"required": ["emailId","emailChangeContent","pdfContent"],
	"type":"object",
  	"properties":{
    	"emailId":{
            "uniqueItems": true,
    		"type":"array",
            "minItems": 1,
            "maxItems": 10,
    		"items":{
    			"type":"string"
    		}
    	},
    	"emailChangeContent":{
    		"type":"array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 10,
    		"items":{
    			"type":"object",
    			"properties":{
    				"contentName":{
    					"type":"string"
    				},
    				"contentValue":{
    					"type":"string"
    				}
    			}
    		}
    	},
    	"pdfContent":{
    		"type":"array",
            "minItems": 1,
            "maxItems": 10,
            "uniqueItems": true,
    		"items":{
                    "required": ["mode","fileId","page"],
        			"type":"object",
        			"properties":{
        				"mode":{
        					"type":"string"
        				},
        				"fileId":{
        					"type":"string"
        				},
        				"page":{
                            "anyOf":[
                                {
                                    "type":"array",
                                    "items":{"type":"number"}
                                },
                                {
                                    
                                    "enum":["all"]
                                }
                            ]
        					
        				}
        			}
        	}
    	}
  	}
};

var validate={};
 // validate['get'] = ajv.compile(getSchema);
 validate['post'] = ajv.compile(postSchema);
 // validate['update'] = ajv.compile(updateSchema);
 // validate['delete'] = ajv.compile(deleteSchema);

function validate_all (validate,data) { 
	return new Promise((resolve,reject)=>{
		validate(data).then(function (res) {
        // console.log(res);
        console.log(JSON.stringify( res,null,6));
        // resolve(res)
		}).catch(function(err){
		  console.log(JSON.stringify( err,null,10));
		  reject(err.errors[0].dataPath+" "+err.errors[0].message);
		})
	})
}

/**
 * test start from here
 */
describe('categories tests', function () {
  it('validation test', function (done) {
    for(d in data){
      // console.log(data[d]);
      data[d].forEach(function (elem) {
      validate_all(validate[d],elem)
        .then(function (data) {
          console.log('Valid:', data)
        })
        .catch(function (err) {
          console.log('Invalid:', err)
        })
    })
    }
    done()
  })
})